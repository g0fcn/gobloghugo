[{"categories":["k8s"],"content":"Kubernetes 创建nfs存储类 首先你需要在别的终端上创建nfs服务并能提供nfs访问 Kubernetes 不包含内部 NFS 驱动。你需要使用外部驱动为 NFS 创建 StorageClass。 https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner 安装nfs驱动 ","date":"2021-12-13","objectID":"/k8snfs/:0:0","tags":["k8s"],"title":"Kubernetes 创建nfs存储类","uri":"/k8snfs/"},{"categories":["k8s"],"content":"安装nfs驱动 #安装nfs客户端 apt-get install nfs-common git clone https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner.git cd nfs-subdir-external-provisioner/deploy k3s kubectl create -f rbac.yaml vim deployment.yaml 编辑 deployment.yaml apiVersion:apps/v1kind:Deploymentmetadata:name:nfs-client-provisionerlabels:app:nfs-client-provisioner# replace with namespace where provisioner is deployednamespace:defaultspec:replicas:1strategy:type:Recreateselector:matchLabels:app:nfs-client-provisionertemplate:metadata:labels:app:nfs-client-provisionerspec:serviceAccountName:nfs-client-provisionercontainers:- name:nfs-client-provisionerimage:k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2volumeMounts:- name:nfs-client-rootmountPath:/persistentvolumesenv:- name:PROVISIONER_NAMEvalue:k8s-sigs.io/nfs-subdir-external-provisioner- name:NFS_SERVERvalue:192.168.99.235- name:NFS_PATHvalue:/volume2/nfs-k8svolumes:- name:nfs-client-rootnfs:server:192.168.99.235path:/volume2/nfs-k8s 定义存储类 k3s kubectl create -f deployment.yaml k3s kubectl create -f class.yaml ","date":"2021-12-13","objectID":"/k8snfs/:1:0","tags":["k8s"],"title":"Kubernetes 创建nfs存储类","uri":"/k8snfs/"},{"categories":["k8s"],"content":"测试存储是否正常 k3s kubectl create -f test-claim.yaml -f test-pod.yaml k3s kubectl delete -f test-claim.yaml -f test-pod.yaml ","date":"2021-12-13","objectID":"/k8snfs/:2:0","tags":["k8s"],"title":"Kubernetes 创建nfs存储类","uri":"/k8snfs/"},{"categories":["k8s"],"content":"创建有状态pods（mysql） 创建mysql-deployment.yaml apiVersion:v1kind:Servicemetadata:name:mysqlspec:ports:- port:3306selector:app:mysqlclusterIP:None---apiVersion:apps/v1kind:Deploymentmetadata:name:mysqlspec:selector:matchLabels:app:mysqlstrategy:type:Recreatetemplate:metadata:labels:app:mysqlspec:containers:- image:mysql:5.7name:mysqlenv:# Use secret in real usage- name:MYSQL_ROOT_PASSWORDvalue:passwordports:- containerPort:3306name:mysqlvolumeMounts:- name:mysql-persistent-storagemountPath:/var/lib/mysqlvolumes:- name:mysql-persistent-storagepersistentVolumeClaim:claimName:mysql-pv-claim 创建mysql-pv.yaml apiVersion:v1kind:PersistentVolumemetadata:name:mysql-pv-volumespec:storageClassName:managed-nfs-storagecapacity:storage:20GiaccessModes:- ReadWriteOncenfs:server:192.168.99.235path:\"/volume2/nfs-k8s\"---apiVersion:v1metadata:name:mysql-pv-claimspec:storageClassName:managed-nfs-storageaccessModes:- ReadWriteManyresources:requests:storage:20Gi ","date":"2021-12-13","objectID":"/k8snfs/:3:0","tags":["k8s"],"title":"Kubernetes 创建nfs存储类","uri":"/k8snfs/"},{"categories":["k8s"],"content":"部署 mysql k3s kubectl apply -f mysql-pv.yamlk3s kubectl apply -f mysql-deployment.yamlk3s kubectl describe deployment mysql ","date":"2021-12-13","objectID":"/k8snfs/:4:0","tags":["k8s"],"title":"Kubernetes 创建nfs存储类","uri":"/k8snfs/"},{"categories":["web 服务器"],"content":"nginx 日志配置 ","date":"2021-12-13","objectID":"/nginx01/:0:0","tags":["nginx","linux"],"title":"nginx 日志格式整理","uri":"/nginx01/"},{"categories":["web 服务器"],"content":"语法 access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; # 设置访问日志 access_log off; # 关闭访问日志 例子： access_log /var/logs/nginx-access.log access_log /var/logs/nginx-access.log buffer=32k gzip flush=1m ","date":"2021-12-13","objectID":"/nginx01/:1:0","tags":["nginx","linux"],"title":"nginx 日志格式整理","uri":"/nginx01/"},{"categories":["web 服务器"],"content":"使用log_format 自定义日志格式 Nginx预定义了名为combined日志格式，如果没有明确指定日志格式默认使用该格式： log_format combined '$remote_addr - $remote_user [$time_local] ' '\"$request\" $status $body_bytes_sent ' '\"$http_referer\" \"$http_user_agent\"'; 如果不想使用Nginx预定义的格式，可以通过log_format指令来自定义。 ","date":"2021-12-13","objectID":"/nginx01/:2:0","tags":["nginx","linux"],"title":"nginx 日志格式整理","uri":"/nginx01/"},{"categories":["web 服务器"],"content":"语法 log_format name [escape=default|json] string ...; 变量 含义 $bytes_sent 发送给客户端的总字节数 $body_bytes_sent 发送给客户端的字节数，不包括响应头的大小 $connection 连接序列号 $connection_requests 当前通过连接发出的请求数量 $msec 日志写入时间，单位为秒，精度是毫秒 $pipe 如果请求是通过http流水线发送，则其值为\"p\"，否则为“.\" $request_length 请求长度（包括请求行，请求头和请求体） $request_time 请求处理时长，单位为秒，精度为毫秒，从读入客户端的第一个字节开始，直到把最后一个字符发送张客户端进行日志写入为止 $status 响应状态码 $time_iso8601 标准格式的本地时间,形如“2017-05-24T18:31:27+08:00” $time_local 通用日志格式下的本地时间，如\"24/May/2017:18:31:27 +0800\" $http_referer 请求的referer地址。 $http_user_agent 客户端浏览器信息。 $remote_addr 客户端IP $http_x_forwarded_for 当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置。 $request 完整的原始请求行，如 “GET / HTTP/1.1” $remote_user 客户端用户名称，针对启用了用户认证的请求 $request_uri 完整的请求地址，如 “https://daojia.com/\" 例子： access_log /var/logs/nginx-access.log main log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; ","date":"2021-12-13","objectID":"/nginx01/:2:1","tags":["nginx","linux"],"title":"nginx 日志格式整理","uri":"/nginx01/"},{"categories":["日常"],"content":"linux系统开启root权限 修改ssh服务配置文件 shdo su - sudo vim /etc/ssh/sshd_config 增加权限 在# Authentication: 下输入 PermitRootLogin yes 更改root密码，重启服务 sudo passwd root service sshd restart ","date":"2021-12-12","objectID":"/resetsystem/:0:0","tags":["linux"],"title":"linux系统开启root权限","uri":"/resetsystem/"},{"categories":["数据库"],"content":"mysql 学习笔记（1） 本文章不涉及到关于mysql开放上的问题，主要记录关于mysql出现的问题，以及如何去维护mysql数据的日常。 ","date":"2021-12-12","objectID":"/mysql01/:0:0","tags":["mysql"],"title":"mysql 笔记（1）","uri":"/mysql01/"},{"categories":["数据库"],"content":"mysql各类信息的收集 收集变量信息 showglobalvariables; 收集进程信息 showPROCESSLIST; 收集错误日志 showglobalvariableslike'log_error'; 收集慢日志信息 showglobalvariableslike'slow_querry_log_file'; 收集锁信息，高峰时期运行三次，每次间隔10s SELECTlocked_table,locked_index,locked_type,blocking_pid,T2.USERblocking_user,T2.HOSTblocking_host,blocking_lock_mode,blocking_trx_rows_modified,waiting_pid,T3.USERwaiting_user,T3.HOSTwaiting_host,waiting_lock_mode,waiting_trx_row_modified,wait_age_secs,waiting_queryFROMsys.x$innodb_lock_waitsT1LEFTJOININFROMATION_SCHEMA.processlistT2ONT1.blocking_pid=T2.IDLEFTJOININFROMATION_SCHEMA.processlistT3ONT3.ID=T1.waiting_pid; 收集mysql状态信息 showglobalstatus;showengineinnodbstatus;showengineinnodbmutex; ","date":"2021-12-12","objectID":"/mysql01/:1:0","tags":["mysql"],"title":"mysql 笔记（1）","uri":"/mysql01/"},{"categories":["数据库"],"content":"mysql 基础语法 连接数据库 mysql-u\u003c用户名\u003e-p 创建数据库 CREATEDATABASE\u003c数据库名称\u003e; 删除数据库 dropdatabase\u003c数据库名称\u003e; 选择数据库 use\u003c数据库名称\u003e; ","date":"2021-12-12","objectID":"/mysql01/:2:0","tags":["mysql"],"title":"mysql 笔记（1）","uri":"/mysql01/"},{"categories":["日常"],"content":"163企业邮箱设置教程 请进入这个网站 https://qiye.163.com/help/l-11.html ","date":"2021-12-10","objectID":"/qyyemail163/:0:0","tags":["daliy"],"title":"163企业邮箱设置教程","uri":"/qyyemail163/"},{"categories":["gitlab"],"content":"git技巧 Git 是一个 “分布式版本管理工具”，简单的理解版本管理工具：大家在写东西的时候都用过 “回撤” 这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用 “回撤” 是找不回来的。而 “版本管理工具” 能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。 下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过 “页面内查找” 的方式进行快速查询：Ctrl/Command+f。 ","date":"2021-12-10","objectID":"/gitlab/:0:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"开卷必读 如果之前未使用过 Git，可以学习 Git 小白教程入门 一定要先测试命令的效果后，再用于工作环境中，以防造成不能弥补的后果！到时候别拿着砍刀来找我 所有的命令都在git version 2.7.4 (Apple Git-66)下测试通过 统一概念： 工作区：改动（增删文件和内容） 暂存区：输入命令：git add 改动的文件名，此次改动就放到了 ‘暂存区’ 本地仓库(简称：本地)：输入命令：git commit 此次修改的描述，此次改动就放到了 ’本地仓库’，每个 commit，我叫它为一个 ‘版本’。 远程仓库(简称：远程)：输入命令：git push 远程仓库，此次改动就放到了 ‘远程仓库’（GitHub 等) commit-id：输出命令：git log，最上面那行 commit xxxxxx，后面的字符串就是 commit-id 如果喜欢这个项目，欢迎 Star、提交 Pr、反馈问题😊 ","date":"2021-12-10","objectID":"/gitlab/:1:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"目录 脑图 展示帮助信息 回到远程仓库的状态 重设第一个commit 查看冲突文件列表 展示工作区和暂存区的不同 展示暂存区和最近版本的不同 展示暂存区、工作区和最近版本的不同 快速切换到上一个分支 删除已经合并到 master 的分支 展示本地分支关联远程仓库的情况 关联远程分支 列出所有远程分支 列出本地和远程分支 查看远程分支和本地分支的对应关系 远程删除了分支本地也想删除 创建并切换到本地分支 从远程分支中创建并切换到本地分支 删除本地分支 删除远程分支 重命名本地分支 查看标签 查看标签详细信息 本地创建标签 推送标签到远程仓库 删除本地标签 删除远程标签 切回到某个标签 放弃工作区的修改 恢复删除的文件 以新增一个 commit 的方式还原某一个 commit 的修改 回到某个 commit 的状态，并删除后面的 commit 修改上一个 commit 的描述 查看 commit 历史 显示本地更新过 HEAD 的 git 命令记录 修改作者名 修改远程仓库的 url 增加远程仓库 列出所有远程仓库 查看两个星期内的改动 把 A 分支的某一个 commit，放到 B 分支上 给 git 命令起别名 存储当前的修改，但不用提交 commit 保存当前状态，包括 untracked 的文件 展示所有 stashes 回到某个 stash 的状态 回到最后一个 stash 的状态，并删除这个 stash 删除所有的 stash 从 stash 中拿出某个文件的修改 展示所有 tracked 的文件 展示所有 untracked 的文件 展示所有忽略的文件 强制删除 untracked 的文件 强制删除 untracked 的目录 展示简化的 commit 历史 查看某段代码是谁写的 把某一个分支导出成一个文件 从包中导入分支 执行 rebase 之前自动 stash 从远程仓库根据 ID，拉下某一状态，到本地分支 详细展示一行中的修改 清除 .gitignore 文件中记录的文件 展示所有 alias 和 configs 展示忽略的文件 commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit 在 commit log 中显示 GPG 签名 删除全局设置 新建并切换到新分支上，同时这个分支没有任何 commit 展示任意分支某一文件的内容 clone 下来指定的单一分支 clone 最新一次提交 忽略某个文件的改动 忽略文件的权限变化 以最后提交的顺序列出所有 Git 分支 在 commit log 中查找相关内容 把暂存区的指定 file 放到工作区中 强制推送 git 配置 http 和 socks 代理 git 配置 ssh 代理 优雅的Commit信息 commit工具 声明 ","date":"2021-12-10","objectID":"/gitlab/:2:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示帮助信息 git help -g The command output as below: The common Git guides are: attributes Defining attributes per path cli Git command-line interface and conventions core-tutorial A Git core tutorial for developers cvs-migration Git for CVS users diffcore Tweaking diff output everyday A useful minimum set of commands for Everyday Git glossary A Git Glossary hooks Hooks used by Git ignore Specifies intentionally untracked files to ignore modules Defining submodule properties namespaces Git namespaces repository-layout Git Repository Layout revisions Specifying revisions and ranges for Git tutorial A tutorial introduction to Git tutorial-2 A tutorial introduction to Git: part two workflows An overview of recommended workflows with Git 'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help \u003ccommand\u003e' or 'git help \u003cconcept\u003e' to read about a specific subcommand or concept. ","date":"2021-12-10","objectID":"/gitlab/:3:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"回到远程仓库的状态 抛弃本地所有的修改，回到远程仓库的状态。 git fetch --all \u0026\u0026 git reset --hard origin/master ","date":"2021-12-10","objectID":"/gitlab/:4:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"重设第一个 commit 也就是把所有的改动都重新放回工作区，并清空所有的 commit，这样就可以重新提交第一个 commit 了 git update-ref -d HEAD ","date":"2021-12-10","objectID":"/gitlab/:5:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看冲突文件列表 展示工作区的冲突文件列表 git diff --name-only --diff-filter=U ","date":"2021-12-10","objectID":"/gitlab/:6:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示工作区和暂存区的不同 输出工作区和暂存区的 different (不同)。 git diff 还可以展示本地仓库中任意两个 commit 之间的文件变动： git diff \u003ccommit-id\u003e \u003ccommit-id\u003e ","date":"2021-12-10","objectID":"/gitlab/:7:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示暂存区和最近版本的不同 输出暂存区和本地最近的版本 (commit) 的 different (不同)。 git diff --cached ","date":"2021-12-10","objectID":"/gitlab/:8:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示暂存区、工作区和最近版本的不同 输出工作区、暂存区 和本地最近的版本 (commit) 的 different (不同)。 git diff HEAD ","date":"2021-12-10","objectID":"/gitlab/:9:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"快速切换到上一个分支 git checkout - ","date":"2021-12-10","objectID":"/gitlab/:10:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除已经合并到 master 的分支 git branch --merged master | grep -v '^\\*\\| master' | xargs -n 1 git branch -d ","date":"2021-12-10","objectID":"/gitlab/:11:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示本地分支关联远程仓库的情况 git branch -vv ","date":"2021-12-10","objectID":"/gitlab/:12:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"关联远程分支 关联之后，git branch -vv 就可以展示关联的远程分支名了，同时推送到远程仓库直接：git push，不需要指定远程仓库了。 git branch -u origin/mybranch 或者在 push 时加上 -u 参数 git push origin/mybranch -u ","date":"2021-12-10","objectID":"/gitlab/:13:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"列出所有远程分支 -r 参数相当于：remote git branch -r ","date":"2021-12-10","objectID":"/gitlab/:14:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"列出本地和远程分支 -a 参数相当于：all git branch -a ","date":"2021-12-10","objectID":"/gitlab/:15:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看远程分支和本地分支的对应关系 git remote show origin ","date":"2021-12-10","objectID":"/gitlab/:16:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"远程删除了分支本地也想删除 git remote prune origin ","date":"2021-12-10","objectID":"/gitlab/:17:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"创建并切换到本地分支 git checkout -b \u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:18:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"从远程分支中创建并切换到本地分支 git checkout -b \u003cbranch-name\u003e origin/\u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:19:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除本地分支 git branch -d \u003clocal-branchname\u003e ","date":"2021-12-10","objectID":"/gitlab/:20:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除远程分支 git push origin --delete \u003cremote-branchname\u003e 或者 git push origin :\u003cremote-branchname\u003e ","date":"2021-12-10","objectID":"/gitlab/:21:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"重命名本地分支 git branch -m \u003cnew-branch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:22:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看标签 git tag 展示当前分支的最近的 tag git describe --tags --abbrev=0 ","date":"2021-12-10","objectID":"/gitlab/:23:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看标签详细信息 git tag -ln ","date":"2021-12-10","objectID":"/gitlab/:24:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"本地创建标签 git tag \u003cversion-number\u003e 默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag： $ git tag -a \u003cversion-number\u003e -m \"v1.0 发布(描述)\" \u003ccommit-id\u003e ","date":"2021-12-10","objectID":"/gitlab/:25:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"推送标签到远程仓库 首先要保证本地创建好了标签才可以推送标签到远程仓库： git push origin \u003clocal-version-number\u003e 一次性推送所有标签，同步到远程仓库： git push origin --tags ","date":"2021-12-10","objectID":"/gitlab/:26:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除本地标签 git tag -d \u003ctag-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:27:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除远程标签 git push origin --delete tag \u003ctagname\u003e ","date":"2021-12-10","objectID":"/gitlab/:28:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"切回到某个标签 一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态： git checkout -b branch_name tag_name ","date":"2021-12-10","objectID":"/gitlab/:29:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"放弃工作区的修改 git checkout \u003cfile-name\u003e 放弃所有修改： git checkout . ","date":"2021-12-10","objectID":"/gitlab/:30:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"恢复删除的文件 git rev-list -n 1 HEAD -- \u003cfile_path\u003e #得到 deleting_commit git checkout \u003cdeleting_commit\u003e^ -- \u003cfile_path\u003e #回到删除文件 deleting_commit 之前的状态 ","date":"2021-12-10","objectID":"/gitlab/:31:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"以新增一个 commit 的方式还原某一个 commit 的修改 git revert \u003ccommit-id\u003e ","date":"2021-12-10","objectID":"/gitlab/:32:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"回到某个 commit 的状态，并删除后面的 commit 和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit git reset \u003ccommit-id\u003e #默认就是-mixed参数。 git reset --mixed HEAD^ #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。 git reset --soft HEAD~3 #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可 git reset --hard \u003ccommit-id\u003e #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容 ","date":"2021-12-10","objectID":"/gitlab/:33:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"修改上一个 commit 的描述 如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit git commit --amend ","date":"2021-12-10","objectID":"/gitlab/:34:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看 commit 历史 git log ","date":"2021-12-10","objectID":"/gitlab/:35:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看某段代码是谁写的 blame 的意思为‘责怪’，你懂的。 git blame \u003cfile-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:36:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"显示本地更新过 HEAD 的 git 命令记录 每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。 这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。 git reflog ","date":"2021-12-10","objectID":"/gitlab/:37:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"修改作者名 git commit --amend --author='Author Name \u003cemail@address.com\u003e' ","date":"2021-12-10","objectID":"/gitlab/:38:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"修改远程仓库的 url git remote set-url origin \u003cURL\u003e ","date":"2021-12-10","objectID":"/gitlab/:39:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"增加远程仓库 git remote add origin \u003cremote-url\u003e ","date":"2021-12-10","objectID":"/gitlab/:40:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"列出所有远程仓库 git remote ","date":"2021-12-10","objectID":"/gitlab/:41:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"查看两个星期内的改动 git whatchanged --since='2 weeks ago' ","date":"2021-12-10","objectID":"/gitlab/:42:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"把 A 分支的某一个 commit，放到 B 分支上 这个过程需要 cherry-pick 命令，参考 git checkout \u003cbranch-name\u003e \u0026\u0026 git cherry-pick \u003ccommit-id\u003e ","date":"2021-12-10","objectID":"/gitlab/:43:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"给 git 命令起别名 简化命令 git config --global alias.\u003chandle\u003e \u003ccommand\u003e 比如：git status 改成 git st，这样可以简化命令 git config --global alias.st status ","date":"2021-12-10","objectID":"/gitlab/:44:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"存储当前的修改，但不用提交 commit 详解可以参考廖雪峰老师的 git 教程 git stash ","date":"2021-12-10","objectID":"/gitlab/:45:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"保存当前状态，包括 untracked 的文件 untracked 文件：新建的文件 git stash -u ","date":"2021-12-10","objectID":"/gitlab/:46:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示所有 stashes git stash list ","date":"2021-12-10","objectID":"/gitlab/:47:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"回到某个 stash 的状态 git stash apply \u003cstash@{n}\u003e ","date":"2021-12-10","objectID":"/gitlab/:48:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"回到最后一个 stash 的状态，并删除这个 stash git stash pop ","date":"2021-12-10","objectID":"/gitlab/:49:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除所有的 stash git stash clear ","date":"2021-12-10","objectID":"/gitlab/:50:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"从 stash 中拿出某个文件的修改 git checkout \u003cstash@{n}\u003e -- \u003cfile-path\u003e ","date":"2021-12-10","objectID":"/gitlab/:51:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示所有 tracked 的文件 git ls-files -t ","date":"2021-12-10","objectID":"/gitlab/:52:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示所有 untracked 的文件 git ls-files --others ","date":"2021-12-10","objectID":"/gitlab/:53:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示所有忽略的文件 git ls-files --others -i --exclude-standard ","date":"2021-12-10","objectID":"/gitlab/:54:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"强制删除 untracked 的文件 可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。clean 命令，注意两点： clean 后，删除的文件无法找回 不会影响 tracked 的文件的改动，只会删除 untracked 的文件 git clean \u003cfile-name\u003e -f ","date":"2021-12-10","objectID":"/gitlab/:55:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"强制删除 untracked 的目录 可以用来删除新建的目录，注意:这个命令也可以用来删除 untracked 的文件。详情见上一条 git clean \u003cdirectory-name\u003e -df ","date":"2021-12-10","objectID":"/gitlab/:56:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示简化的 commit 历史 git log --pretty=oneline --graph --decorate --all ","date":"2021-12-10","objectID":"/gitlab/:57:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"把某一个分支导出成一个文件 git bundle create \u003cfile\u003e \u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:58:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"从包中导入分支 新建一个分支，分支内容就是上面 git bundle create 命令导出的内容 git clone repo.bundle \u003crepo-dir\u003e -b \u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:59:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"执行 rebase 之前自动 stash git rebase --autostash ","date":"2021-12-10","objectID":"/gitlab/:60:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"从远程仓库根据 ID，拉下某一状态，到本地分支 git fetch origin pull/\u003cid\u003e/head:\u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:61:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"详细展示一行中的修改 git diff --word-diff ","date":"2021-12-10","objectID":"/gitlab/:62:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"清除 gitignore 文件中记录的文件 git clean -X -f ","date":"2021-12-10","objectID":"/gitlab/:63:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示所有 alias 和 configs 注意： config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config git config --local --list (当前目录) git config --global --list (全局) ","date":"2021-12-10","objectID":"/gitlab/:64:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示忽略的文件 git status --ignored ","date":"2021-12-10","objectID":"/gitlab/:65:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit git log Branch1 ^Branch2 ","date":"2021-12-10","objectID":"/gitlab/:66:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"在 commit log 中显示 GPG 签名 git log --show-signature ","date":"2021-12-10","objectID":"/gitlab/:67:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"删除全局设置 git config --global --unset \u003centry-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:68:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"新建并切换到新分支上，同时这个分支没有任何 commit 相当于保存修改，但是重写 commit 历史 git checkout --orphan \u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:69:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"展示任意分支某一文件的内容 git show \u003cbranch-name\u003e:\u003cfile-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:70:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"clone 下来指定的单一分支 git clone -b \u003cbranch-name\u003e --single-branch https://github.com/user/repo.git ","date":"2021-12-10","objectID":"/gitlab/:71:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"clone 最新一次提交 只会 clone 最近一次提交，将减少 clone 时间 git clone --depth=1 https://github.com/user/repo.git ","date":"2021-12-10","objectID":"/gitlab/:72:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"忽略某个文件的改动 关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动 git update-index --assume-unchanged path/to/file 恢复 track 指定文件的改动 git update-index --no-assume-unchanged path/to/file ","date":"2021-12-10","objectID":"/gitlab/:73:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"忽略文件的权限变化 不再将文件的权限变化视作改动 git config core.fileMode false ","date":"2021-12-10","objectID":"/gitlab/:74:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"以最后提交的顺序列出所有 Git 分支 最新的放在最上面 git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ ","date":"2021-12-10","objectID":"/gitlab/:75:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"在 commit log 中查找相关内容 通过 grep 查找，given-text：所需要查找的字段 git log --all --grep='\u003cgiven-text\u003e' ","date":"2021-12-10","objectID":"/gitlab/:76:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"把暂存区的指定 file 放到工作区中 不添加参数，默认是 -mixed git reset \u003cfile-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:77:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"强制推送 git push -f \u003cremote-name\u003e \u003cbranch-name\u003e ","date":"2021-12-10","objectID":"/gitlab/:78:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"git 配置 http 和 socks 代理 git config --global https.proxy 'http://127.0.0.1:8001' # 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口 git config --global http.proxy 'http://127.0.0.1:8001' git config --global socks.proxy \"127.0.0.1:1080\" ","date":"2021-12-10","objectID":"/gitlab/:79:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"git 配置 ssh 代理 $ cat ~/.ssh/config Host gitlab.com ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p # 直接使用 shadowsocks 提供的 socks5 代理端口 Host github.com ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p ","date":"2021-12-10","objectID":"/gitlab/:80:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"脑图 ","date":"2021-12-10","objectID":"/gitlab/:81:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"优雅的Commit信息 使用Angular团队提交规范 主要有以下组成 标题行: 必填, 描述主要修改类型和内容 主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等 页脚注释: 放 Breaking Changes 或 Closed Issues 常用的修改项 type: commit 的类型 feat: 新特性 fix: 修改问题 refactor: 代码重构 docs: 文档修改 style: 代码格式修改, 注意不是 css 修改 test: 测试用例修改 chore: 其他修改, 比如构建流程, 依赖管理. scope: commit 影响的范围, 比如: route, component, utils, build… subject: commit 的概述 body: commit 具体修改内容, 可以分为多行 footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接. ","date":"2021-12-10","objectID":"/gitlab/:82:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["gitlab"],"content":"commit工具 可以使用cz-cli工具代替 git commit 全局安装 npm install -g commitizen cz-conventional-changelog echo '{ \"path\": \"cz-conventional-changelog\" }' \u003e ~/.czrc 全局安装后使用 git cz 代替 git commit就可以了,如下图 ⬆ 返回顶部 ","date":"2021-12-10","objectID":"/gitlab/:83:0","tags":["gitlab"],"title":"git技巧","uri":"/gitlab/"},{"categories":["docker"],"content":"docker image镜像上传 登入docker hub，在https://hub.docker.com上注册你的账号。 docker login username：#输入你的用户名 password：#输入你的密码 ","date":"2021-12-09","objectID":"/dockerimage/:0:0","tags":["docker"],"title":"docker image镜像上传","uri":"/dockerimage/"},{"categories":["docker"],"content":"上传镜像 docker tag nginx:hugo sjtfreaks/hogo-nginx:v1 docker push sjtfreaks/hogo-nginx:v1 ","date":"2021-12-09","objectID":"/dockerimage/:1:0","tags":["docker"],"title":"docker image镜像上传","uri":"/dockerimage/"},{"categories":["docker"],"content":"安装docker 通过docker 脚本安装 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun curl -sSL https://get.daocloud.io/docker | sh docker命令 常用docker命令 #查看容器 docker ps #查看镜像 docker images #停止当前所有容器 docker stop $(docker ps -aq) #删除当前停止的所有容器 docker rm $(docker ps -aq) #删除镜像 docker rmi nginx ","date":"2021-12-09","objectID":"/docker/:0:0","tags":["docker"],"title":"docker 命令","uri":"/docker/"},{"categories":["docker"],"content":"docker 进阶使用 dockerfile和docker compose的配置 Dockerfile 使用 Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。 例子： FROM nginx RUN echo '这是一个本地构建的nginx镜像' \u003e /usr/share/nginx/html/index.html 保存Dockerfile文件并在本地路径执行 docker build -t nginx:v1-test . docker run -name docker run --name nginx-test -d -p 8080:80 nginx:v1-test 浏览nginx页面确认更新内容 curl 127.0.0.1:8080 输出： 这是一个本地构建的nginx镜像 ","date":"2021-12-09","objectID":"/docker01/:0:0","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"Docker命令详解 ","date":"2021-12-09","objectID":"/docker01/:1:0","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"COPY 复制指令，从上下文目录中复制文件或者目录到容器里指定路径。 COPY [--chown=\u003cuser\u003e:\u003cgroup\u003e] \u003c源路径1\u003e... \u003c目标路径\u003e COPY [--chown=\u003cuser\u003e:\u003cgroup\u003e] [\"\u003c源路径1\u003e\",... \"\u003c目标路径\u003e\"] \u003c源路径\u003e：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如： COPY hom* /mydir/ COPY hom?.txt /mydir/ ","date":"2021-12-09","objectID":"/docker01/:1:1","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"FROM FROM：定制的镜像都是基于 FROM 的镜像 FROM nginx ","date":"2021-12-09","objectID":"/docker01/:1:2","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"RUN RUN：用于执行后面跟着的命令行命令 shell： RUN \u003c命令行命令\u003e # \u003c命令行命令\u003e 等同于，在终端操作的 shell 命令。 exec： RUN [\"可执行文件\", \"参数1\", \"参数2\"] # 例如： # RUN [\"./test.php\", \"dev\", \"offline\"] 等价于 RUN ./test.php dev offline ","date":"2021-12-09","objectID":"/docker01/:1:3","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"ADD ADD 指令和 COPY 的使用格类似 ADD 的优点：在执行 \u003c源文件\u003e 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 \u003c目标路径\u003e。 ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。 ","date":"2021-12-09","objectID":"/docker01/:1:4","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"CMD 类似于 RUN 指令，用于运行程序，但二者运行的时间点不同: CMD 在docker run 时运行。 RUN 是在 docker build。 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。 CMD \u003cshell 命令\u003e CMD [\"\u003c可执行文件或命令\u003e\",\"\u003cparam1\u003e\",\"\u003cparam2\u003e\",...] CMD [\"\u003cparam1\u003e\",\"\u003cparam2\u003e\",...] # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数 ","date":"2021-12-09","objectID":"/docker01/:1:5","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["docker"],"content":"通过dockerfile文件封装hugo dokcerfile文件 FROM nginx:1.21 COPY public/ /usr/share/nginx/html docker.sh文件 #/!bin/bash echo \"删除旧的docker\" docker ps docker stop nginx-hugo docker rm nginx-hugo docker rmi nginx:hugo echo \"生成新的docker\" hugo -t LoveIt -D docker build -t nginx:hugo . docker run --name nginx-hugo -d -p 8080:80 nginx:hugo echo \"显示端口\" netstat -lntp 执行脚本： sh update.sh ","date":"2021-12-09","objectID":"/docker01/:2:0","tags":["docker","dockerfile","DockerCompose"],"title":"docker进阶使用","uri":"/docker01/"},{"categories":["k8s"],"content":"Kubernetes k8s 组件 ","date":"2021-12-09","objectID":"/kubernetes/:0:0","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"控制平面组件（Control Plane Components） 控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件（例如，当不满足部署的 replicas 字段时，启动新的 pod）。 ","date":"2021-12-09","objectID":"/kubernetes/:1:0","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"kube-apiserver API 服务器是 Kubernetes 控制面的组件， 该组件公开了 Kubernetes API。 API 服务器是 Kubernetes 控制面的前端。 ","date":"2021-12-09","objectID":"/kubernetes/:1:1","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"etcd etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。 ","date":"2021-12-09","objectID":"/kubernetes/:1:2","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"kube-scheduler 控制平面组件，负责监视新创建的、未指定运行节点（node）的 Pods，选择节点让 Pod 在上面运行。 ","date":"2021-12-09","objectID":"/kubernetes/:1:3","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"kube-controller-manager 运行控制器进程的控制平面组件。 ","date":"2021-12-09","objectID":"/kubernetes/:1:4","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"cloud-controller-manager 云控制器管理器是指嵌入特定云的控制逻辑的 控制平面组件。 云控制器管理器使得你可以将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。 ","date":"2021-12-09","objectID":"/kubernetes/:1:5","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"Node 组件 节点组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。 ","date":"2021-12-09","objectID":"/kubernetes/:2:0","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"kubelet 一个在集群中每个节点（node）上运行的代理。 它保证容器（containers）都 运行在 Pod 中。 ","date":"2021-12-09","objectID":"/kubernetes/:2:1","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"kube-proxy kube-proxy 是集群中每个节点上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。 ","date":"2021-12-09","objectID":"/kubernetes/:2:2","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["k8s"],"content":"容器运行时（Container Runtime） 容器运行环境是负责运行容器的软件。 Kubernetes 支持多个容器运行环境: Docker、 containerd、CRI-O 以及任何实现 Kubernetes CRI (容器运行环境接口)。 ","date":"2021-12-09","objectID":"/kubernetes/:2:3","tags":["k8s"],"title":"Kubernetes k8s 组件","uri":"/kubernetes/"},{"categories":["日常"],"content":"2021年第50周周记 这周完成了以下任务 搭建hugo博客 使用docker封装了blog 搭建k3s环境 计划： 学习k8s 总结：没啥好总结，刚开始写周记，就随便写一点吧 ","date":"2021-12-08","objectID":"/20211210/:0:0","tags":["daliy"],"title":"2021年第50周记","uri":"/20211210/"},{"categories":["web 服务器"],"content":"nginx 汇总 各类nginx 问题汇总 ","date":"2021-12-08","objectID":"/nginx/:0:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"安装nginx #centos yum install nginx #ubuntu apt install nginx ","date":"2021-12-08","objectID":"/nginx/:1:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"http代理 ","date":"2021-12-08","objectID":"/nginx/:2:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"正向代理 server { listen 80; server_name www.nbtyfood.com; location / { proxy_pass http://127.0.0.1:8080; } } ","date":"2021-12-08","objectID":"/nginx/:2:1","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"反向代理 ","date":"2021-12-08","objectID":"/nginx/:2:2","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"负载均衡 upstream mysvr { server 192.168.10.121:3333; server 192.168.10.122:3333; } server { .... location ~*^.+$ { proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表 } } 热备 如果你有2台服务器，当一台服务器发生事故时，才启用第二台服务器给提供服务。服务器处理请求的顺序：AAAAAA突然A挂啦，BBBBBBBBBBBBBB….. upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333 backup; #热备 } 轮询 nginx默认就是轮询其权重都默认为1，服务器处理请求的顺序：ABABABABAB…. upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333; } 加权轮询 跟据配置的权重的大小而分发给不同服务器不同数量的请求。如果不设置，则默认为1。下面服务器的请求顺序为：ABBABBABBABBABB…. upstream mysvr { server 127.0.0.1:7878 weight=1;w server 192.168.10.121:3333 weight=2; } ip_hash nginx会让相同的客户端ip请求相同的服务器。 upstream mysvr { server 127.0.0.1:7878; server 192.168.10.121:3333; ip_hash; } ","date":"2021-12-08","objectID":"/nginx/:3:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"web缓存 location /images/ { proxy_cache my_cache; proxy_ignore_headers Cache-Control; proxy_cache_valid any 30m; # ... } ","date":"2021-12-08","objectID":"/nginx/:4:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["web 服务器"],"content":"重定向 rewrite ^/(.*) http://www.nbtyfood.com/$1 permanent; ","date":"2021-12-08","objectID":"/nginx/:5:0","tags":["nginx","linux"],"title":"nginx 汇总","uri":"/nginx/"},{"categories":["基础"],"content":"TCP/IP协议 ","date":"2021-12-08","objectID":"/tcpip/:0:0","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["基础"],"content":"什么是TCP/IP协议 OSI七层架构 TCP/IP四层模型 协议 应用层 HTTP、SMTP、SNMP、FTP、Telnet、SIP、SSH、NFS 表示层 应用层 XDR、ASN.1、NCP、TLS、ASCII 会话层 sockets、SOCKS、PAP 传输层 传输层 TCP、UDP、RTP、SCTP 网络层 网络互连层 IP、ICMP、IPX、BGP、OSPF、RIP、IGRP、EIGRP 数据链路层 网络访问（链接）层 以太网、令牌环、HDLC、帧中继、ISDN、ATM、IEEE 802.11 物理层 调制解调器、无线电、光纤 ","date":"2021-12-08","objectID":"/tcpip/:1:0","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["基础"],"content":"报文结构 TCP报文段首部格式 源端口和目的端口：各占 2 个字节，分别写入源端口和目的端口。IP 地址 + 端口号就可以确定一个进程地址 序号/序列号（Sequense Number，SN）：在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号。该字段表示本报文段所发送的数据的第一个字节的序号。初始序号称为 Init Sequense Number, ISN（序号/序列号这个字段很重要，大家留个印象，下文会详细讲解） 例如，一报文段的序号是 101，共有 100 字节的数据。这就表明：本报文段的数据的第一个字节的序号是 101，最后一个字节的序号是 200。显然，下一个报文段的数据序号应当从 201 开始，即下一个报文段的序号字段值应为 201。 确认号 ack：期望收到对方下一个报文段的第一个数据字节的序号。若确认号为 N，则表明：到序号 N-1 为止的所有数据都已正确收到。 数据偏移（首部长度）：它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。 保留：占 6 位，应置为 0，保留为今后使用。 ","date":"2021-12-08","objectID":"/tcpip/:1:1","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["基础"],"content":"TCP三次握手 ","date":"2021-12-08","objectID":"/tcpip/:2:0","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["基础"],"content":"TCP四次挥手 ","date":"2021-12-08","objectID":"/tcpip/:3:0","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["基础"],"content":"TCP/IP其他问题 TCP与UDP的区别 （1）TCP：面向连接，可靠的，速度慢，效率低。 （2）UDP：无连接、不可靠、速度快、效率高。 当进程需要传输可靠的数据时应使用TCP，当进程需要高效传输数据，可以忽略可靠性时应使用UDP协议。 ","date":"2021-12-08","objectID":"/tcpip/:4:0","tags":["TCP/IP"],"title":"TCP/IP详解","uri":"/tcpip/"},{"categories":["日常"],"content":"内网穿透 文章中使用的内网穿透前提是必须具有公网IP的云服务器，不符合条件的同学可以跳过了。 ","date":"2021-12-08","objectID":"/nps/:0:0","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"nps内网穿透 nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。 ","date":"2021-12-08","objectID":"/nps/:1:0","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"在公网服务器上安装nps sever端 wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_server.tar.gz tar -zxvf linux_amd64_server.tar.gz sudo ./nps install sudo nps start ","date":"2021-12-08","objectID":"/nps/:1:1","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"在控制端安装npc client端 wget https://github.com/ehang-io/nps/releases/download/v0.26.10/linux_amd64_client.tar.gz tar -zxvf linux_amd64_client.tar.gz sudo ./npc -server=ip:port -vkey=web界面中显示的密钥 sudo npc start npc安装完成可以进入web页面穿透端口和域名 http://localhost:8080 ","date":"2021-12-08","objectID":"/nps/:1:2","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"frps内网穿透 frps 相对于nps的劣势是有断流的风险 frps 相对于nps的优势是对于高流量的媒体服务能够提供更可靠的支持 ","date":"2021-12-08","objectID":"/nps/:2:0","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"安装frps wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.sh chmod 700 ./install-frps.sh ./install-frps.sh install 卸载 frps服务 ./install-frps.sh uninstall 更新 frps服务 ./install-frps.sh update Server management（服务管理器） Usage: /etc/init.d/frps {start|stop|restart|status|config|version} ","date":"2021-12-08","objectID":"/nps/:2:1","tags":["内网穿透","nps"],"title":"自建服务器内网穿透","uri":"/nps/"},{"categories":["日常"],"content":"树莓派安装k3s ","date":"2021-12-06","objectID":"/rasberry/:0:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"1.安装k3s ","date":"2021-12-06","objectID":"/rasberry/:1:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"控制节点 curl -sfL https://get.k3s.io | sh - cat /var/lib/rancher/k3s/server/node-token ","date":"2021-12-06","objectID":"/rasberry/:1:1","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"工作节点 curl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh - 树莓派特别要注意一个坑，就是关于内存的问题这个之后再讲 k3s kubectl get nodes #显示正确的节点表示完成 ","date":"2021-12-06","objectID":"/rasberry/:1:2","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"卸载 k3s #server 节点 /usr/local/bin/k3s-uninstall.sh #agent 节点 /usr/local/bin/k3s-agent-uninstall.sh ","date":"2021-12-06","objectID":"/rasberry/:1:3","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"2.安装dashboard k3s面板 ","date":"2021-12-06","objectID":"/rasberry/:2:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"部署 Kubernetes 仪表盘 GITHUB_URL=https://github.com/kubernetes/dashboard/releases VERSION_KUBE_DASHBOARD=$(curl -w '%{url_effective}' -I -L -s -S ${GITHUB_URL}/latest -o /dev/null | sed -e 's|.*/||') sudo k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml ","date":"2021-12-06","objectID":"/rasberry/:2:1","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"仪表盘 RBAC 配置 创建以下资源清单文件： dashboard.admin-user.yml apiVersion:v1kind:ServiceAccountmetadata:name:admin-usernamespace:kubernetes-dashboard dashboard.admin-user-role.yml apiVersion:rbac.authorization.k8s.io/v1kind:ClusterRoleBindingmetadata:name:admin-userroleRef:apiGroup:rbac.authorization.k8s.iokind:ClusterRolename:cluster-adminsubjects:- kind:ServiceAccountname:admin-usernamespace:kubernetes-dashboard 部署admin-user 配置： sudo k3s kubectl create -f dashboard.admin-user.yml -f dashboard.admin-user-role.yml 获得 Bearer Token sudo k3s kubectl -n kubernetes-dashboard describe secret admin-user-token | grep '^token' 现在可以通过以下网址访问仪表盘： sudo k3s kubectl proxy http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/ ","date":"2021-12-06","objectID":"/rasberry/:2:2","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"连接lens cat /etc/rancher/k3s/k3s.yaml 更改本地host 穿透服务器IP local ","date":"2021-12-06","objectID":"/rasberry/:2:3","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"3.安装 kube—prometheus 监控 ","date":"2021-12-06","objectID":"/rasberry/:3:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"一键安装 wget https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/v0.9.0.tar.gz tar -zxvf v0.9.0.tar.gz cd kube-prometheus-0.9.0/manifests k3s kubectl apply -f setup/ k3s kubectl get pod -n monitoring k3s kubectl apply -f . ","date":"2021-12-06","objectID":"/rasberry/:3:1","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"一键卸载 cd kube-prometheus/manifests k3s kubectl delete -f . k3s kubectl delete -f setup/ ","date":"2021-12-06","objectID":"/rasberry/:3:2","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"4.安装 nfs外部驱动挂载storageclass ","date":"2021-12-06","objectID":"/rasberry/:4:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["日常"],"content":"5.创建有状态pods（mysql） ","date":"2021-12-06","objectID":"/rasberry/:5:0","tags":["树莓派","k3s"],"title":"树莓派搭建k3s","uri":"/rasberry/"},{"categories":["Mac"],"content":"brew 安装配置 ","date":"2021-12-03","objectID":"/brew/:0:0","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"一.安装 ","date":"2021-12-03","objectID":"/brew/:1:0","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"1.在ubuntu上安装 brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ","date":"2021-12-03","objectID":"/brew/:1:1","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"2.在centos上安装 brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ","date":"2021-12-03","objectID":"/brew/:1:2","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"3.在MacOS上安装 brew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" ","date":"2021-12-03","objectID":"/brew/:1:3","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"二、使用 ","date":"2021-12-03","objectID":"/brew/:2:0","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"1.安装 wget brew install wget Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local $ cd /usr/local $ find Cellar Cellar/wget/1.16.1 Cellar/wget/1.16.1/bin/wget Cellar/wget/1.16.1/share/man/man1/wget.1 $ ls -l bin bin/wget -\u003e ../Cellar/wget/1.16.1/bin/wget ","date":"2021-12-03","objectID":"/brew/:2:1","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"2.创建你自己的 Homebrew 包 $ brew create https://foo.com/bar-1.0.tgz Created /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/bar.rb ","date":"2021-12-03","objectID":"/brew/:2:2","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["Mac"],"content":"3.撤销你的变更或与上游更新合并 $ brew edit wget # 使用 $EDITOR 编辑! ","date":"2021-12-03","objectID":"/brew/:2:3","tags":["brew"],"title":"brew 安装配置","uri":"/brew/"},{"categories":["gitlab"],"content":"gitlab CI/CD 的使用 我将使用gitlab的流水线自动实现hugo blog 文章的自动发布。 ","date":"2021-12-03","objectID":"/gitlab-cicd/:0:0","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"一、基础知识 ","date":"2021-12-03","objectID":"/gitlab-cicd/:1:0","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"二、安装过程 ","date":"2021-12-03","objectID":"/gitlab-cicd/:2:0","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"1.安装gitlab runner 首先需要安装 gitlab runner 进入服务器A 安装方法： 容器部署 手动二进制文件部署 通过rpm/deb包部署 docker方式安装 安装文档：https://docs.gitlab.com/runne… docker run -dit \\ --name gitlab-runner \\ --restart always \\ -v /srv/gitlab-runner/config:/etc/gitlab-runner \\ -v /var/run/docker.sock:/var/run/docker.sock \\ gitlab/gitlab-runner 1.1 设置信息 docker exec -it gitlab-runner gitlab-runner register 非docker方式安装 2.1 安装GitLab Runner 安装环境：Linux 其他环境参考：https://docs.gitlab.com/runne… 下载 curl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64 添加权限 chmod +x /usr/local/bin/gitlab-runner 新建gitlab-runner用户 sudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash 安装 安装时需要指定我们上面新建的用户 gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner 启动 gitlab-runner start ","date":"2021-12-03","objectID":"/gitlab-cicd/:2:1","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"2.配置 docker shell链接 ssh-keygen -t rsa cd .ssh/ cat id_rsa.pub \u003e\u003eauthorized_keys docker cp id_rsa gitlab-runner:/root docker exec -it gitlab-runner /bin/bash chmod 600 /root/id_rsa vim /etc/systemd/system/gitlab-runner.service \"--syslog\" \"--user\" \"root\" #修改为root wq保存退出 systemctl daemon-reload systemctl restart gitlab-runner ","date":"2021-12-03","objectID":"/gitlab-cicd/:2:2","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"3.配置.gitlab-ci.yml文件 vim .gitlab-ci.yml stages: - build - test - deploy build-job: stage: build script: - echo \"上传代码\" - echo \"上传完成.\" unit-test-job: stage: test script: - echo - sleep 60 - echo \"Code coverage is 90%\" lint-test-job: stage: test script: - echo \"Linting code... This will take about 10 seconds.\" - sleep 10 - echo \"No lint issues found.\" deploy-job: stage: deploy script: - echo \"Deploying application...\" - echo \"Application successfully deployed.\" ","date":"2021-12-03","objectID":"/gitlab-cicd/:2:3","tags":["gitlab"],"title":"gitlab CI/CD 的使用","uri":"/gitlab-cicd/"},{"categories":["gitlab"],"content":"git使用方法 ","date":"2021-12-03","objectID":"/git/:0:0","tags":["gitlab"],"title":"git使用方法","uri":"/git/"},{"categories":["gitlab"],"content":"一、git安装配置 Debian/Ubuntu apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev apt-get install git git --version git version 1.8.1.2 Centos/RedHat yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel yum -y install git-core git --version git version 1.7.1 ","date":"2021-12-03","objectID":"/git/:1:0","tags":["gitlab"],"title":"git使用方法","uri":"/git/"},{"categories":["gitlab"],"content":"Markdown教程 参考：https://www.runoob.com/markdown ","date":"2021-12-03","objectID":"/markdown/:0:0","tags":["Markdown"],"title":"Markdown教程","uri":"/markdown/"},{"categories":["hugo"],"content":"hugo命令大全 ","date":"2021-12-01","objectID":"/first/:0:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"安装hugo ","date":"2021-12-01","objectID":"/first/:1:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"二进制安装 brew install hugo ","date":"2021-12-01","objectID":"/first/:1:1","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"源码安装 export GOPATH=$HOME/go go get -v github.com/spf13/hugo go get -u -v github.com/spf13/hugo #更新依赖库 ","date":"2021-12-01","objectID":"/first/:1:2","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"生成站点 hugo new site /opt/blog cd /opt/blog ","date":"2021-12-01","objectID":"/first/:2:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"创建文章 hugo new about.md vim about.md hugo new post/first.md ","date":"2021-12-01","objectID":"/first/:3:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"安装皮肤 cd /opt/blog/themes git clone https://github.com/dillonzq/LoveIt.git ","date":"2021-12-01","objectID":"/first/:4:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"运行hugo hugo server -t LoveIt -D ","date":"2021-12-01","objectID":"/first/:5:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"部署 你要部署在github Page上 hugo --theme=hyde --baseUrl=\"http://coderzh.github.io/\" cd public $ git init $ git remote add origin https://github.com/coderzh/coderzh.github.io.git $ git add -A $ git commit -m \"first commit\" $ git push -u origin master ","date":"2021-12-01","objectID":"/first/:6:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"hugo 添加搜索插件 [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2021-12-01","objectID":"/first/:7:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # LoveIt 新增 | 0.2.1 最大结果数目 maxResultLength = 10 # LoveIt 新增 | 0.2.3 结果内容片段长度 snippetLength = 50 # LoveIt 新增 | 0.2.1 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # LoveIt 新增 | 0.2.4 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" ","date":"2021-12-01","objectID":"/first/:7:1","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["hugo"],"content":"常用命令 nohup hugo server -e production -t LoveIt -D \u0026 ","date":"2021-12-01","objectID":"/first/:8:0","tags":["hugo"],"title":"hugo 命令大全","uri":"/first/"},{"categories":["基础"],"content":"运维图谱 ","date":"2021-12-01","objectID":"/yunwei/:0:0","tags":["运维"],"title":"运维知识图谱","uri":"/yunwei/"}]